'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.exports = function (_ref) {
	var t = _ref.types;

	function makeAttribute(fileName, lineNumber) {
		var attributeName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'source';

		return t.jSXAttribute(t.jSXIdentifier('data-' + attributeName), t.stringLiteral(fileName + ':' + lineNumber));
	}

	function resolveFilename(_ref2, opts) {
		var filename = _ref2.filename,
		    sourceRoot = _ref2.sourceRoot,
		    basename = _ref2.basename;

		if (!filename || filename === 'unknown') {
			return 'unknown';
		}

		if (opts.filename === 'compact') {
			return basename;
		}

		if (sourceRoot) {
			return filename.slice(sourceRoot.length);
		}

		return filename;
	}

	return {
		visitor: {
			JSXOpeningElement: function JSXOpeningElement(path, state) {
				var defaultExclude = ['Fragment'];
				var tagsToExclude = Array.isArray(state.opts.exclude) ? [].concat(_toConsumableArray(state.opts.exclude), defaultExclude) : defaultExclude;

				var _path$container$openi = path.container.openingElement,
				    attributes = _path$container$openi.attributes,
				    loc = _path$container$openi.loc,
				    name = _path$container$openi.name;


				if (!loc || tagsToExclude.includes(name.name)) {
					return;
				}

				attributes.push(makeAttribute(resolveFilename(state.file.opts, state.opts), loc.start.line, state.opts.attributeName));
			}
		}
	};
};